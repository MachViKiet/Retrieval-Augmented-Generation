import React, { useEffect, useState } from 'react'
import { styled } from '@mui/material/styles';
import UnknowPage from '../../components/Page/UnknowPage'
import { useOutletContext } from 'react-router-dom'
import Block from '~/components/Mui/Block'
import { Box, Typography, Button, TextField, Slider, Select, MenuItem, InputLabel, IconButton, FormControlLabel, Switch } from '@mui/material'
import LightbulbOutlinedIcon from '@mui/icons-material/LightbulbOutlined'
import Grid from '@mui/material/Grid2'
import CloudUploadOutlinedIcon from '@mui/icons-material/CloudUploadOutlined'
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'
import SaveOutlinedIcon from '@mui/icons-material/SaveOutlined'
import { getParams, postParams } from '~/apis/KHTN_Chatbot/params';
import { useSelector } from 'react-redux';

const TEXTFIELD_STYLE = {
  '--mui-palette-text-secondary': '#6d6d6d',
  '& .MuiInputBase-root':{
    background: '#7d7d7d0d'
  },
  '& svg': {
    color: '#000'
  },
  '& fieldset': {
    color: '#000'
  },
  '& .MuiSlider-mark': {
    color: '#777',
    width: '8px',
    height: '8px',
    borderRadius: '50%',
  },
  '& .MuiSlider-markLabel': {
    color: '#6d6d6d',
    // '&.MuiSlider-markLabelActive': {
    //   color: '#074307',
    //   fontWeight: '700'
    // }
  }
}

const TEXTFIELD_STYLE_2 = {
  '& input': {
    padding: '7.5px 14px'
  }
}

function ModelsManager() {

  const {processHandler, noticeHandler, dashboard, getModal } = useOutletContext()
  const token = useSelector(state => state.auth.token)
  const role = useSelector(state => state.auth.user.role)

  const [max_token_output, set_max_token_output] = useState(0)
  const [k_document, set_k_document] = useState(2)
  const [threshold, set_threshold] = useState(0)
  const [filter_bias, set_filter_bias] = useState(0)
  const [isHitoryInExtract, setHitoryInExtract] = useState(true)



  useEffect(() => {
    document.title = 'Chatbot - Trang Ch·ªß'
    dashboard.navigate.active(242)

    token && getParamsAPI()
      .then((data) => {
        set_max_token_output(data?.max_tokens)
        set_k_document(data?.k)
        set_threshold(data?.threshold)
        setHitoryInExtract(data?.use_history)
        set_filter_bias(data?.filter_bias)
      })

    return () => ( dashboard.navigate.active('#') )
  }, [token])


  const getParamsAPI = async () => {
    const getPramsEvent = processHandler.add('#getPrams')
    return getParams(token)
      .then((data) => { processHandler.remove('#getPrams', getPramsEvent); return data })
      .catch((err) => { 
        processHandler.remove('#getPrams', getPramsEvent)
        noticeHandler.add({
          status: 'error',
          message: 'C√≥ L·ªói X·∫£y Ra Trong Qu√° Tr√¨nh X·ª≠ L√Ω'
        }) 
        return err 
      })
  }

  const saveParamsAPI = async () => {
    const updateParamsEvent = processHandler.add('#updateParamsEvent')
    const res = await postParams(token, {
      'use_history': isHitoryInExtract,
      'max_tokens': max_token_output,
      'filter_bias': filter_bias,
      'threshold': threshold,
      'k': k_document,
    }).then(() => {
      processHandler.remove('#updateParamsEvent', updateParamsEvent)
      noticeHandler.add({
        status: 'success',
        message: 'C·∫≠p Nh·∫≠t D·ªØ Li·ªáu Th√†nh C√¥ng'
      }) 
    }).catch(() => {
      processHandler.remove('#updateParamsEvent', updateParamsEvent)
      noticeHandler.add({
        status: 'error',
        message: 'C√≥ L·ªói X·∫£y Ra Trong Qu√° Tr√¨nh X·ª≠ L√Ω'
      }) 
    })
    console.log(res)
    return params
  }

  const marks = {
    'max_token': [  
    //   {
    //   value: 1200,
    //   label: 'Gi√° tr·ªã m·∫∑c ƒë·ªãnh',
    // }
  ],
    'max_k': [  
    //   {
    //   value: 3,
    //   label: 'Gi√° tr·ªã m·∫∑c ƒë·ªãnh',
    // }
  ],
    'threshold': [  
    //   {
    //   value: 0.25,
    //   label: 'Gi√° tr·ªã m·∫∑c ƒë·ªãnh',
    // }
  ],
    'filter_bias': [  
    //   {
    //   value: 0.25,
    //   label: 'Gi√° tr·ªã m·∫∑c ƒë·ªãnh',
    // }
  ]
  }

  const handleKeyDown = (event) => {
    const allowedKeys = [
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9','.',
      'Backspace', 'ArrowLeft', 'ArrowRight', 'Delete', 'Tab', 'Enter'
    ];

    if (!allowedKeys.includes(event.key)) {
      event.preventDefault();
    }
  };

  return role == 'administrator' ? (
    <Block sx = {{ paddingX: 2, paddingTop: 4, paddingRight: 2 }}>
      <Box sx ={{ paddingLeft: 2, paddingBottom: 1 }}>
        <Box sx = {{ display: 'flex', gap: 1, alignItems: 'center', justifyContent: 'space-between', paddingBottom: 0.5 }}>
          <Typography variant='h1' 
            sx = {{ fontSize: '1.7rem', fontFamily: 'Roboto', fontWeight: '900', width: 'fit-content', color: theme => theme.palette.mode == 'dark' ? '#fff' : theme.palette.primary.main }}>
              ƒêi·ªÅu Ch·ªânh Th√¥ng S·ªë M√¥ H√¨nh</Typography>
          <Box  sx ={{ marginRight: 2 }}>
            <Button startIcon = {<SaveOutlinedIcon/>} component="label" role={undefined} tabIndex={-1}
              onClick = {saveParamsAPI}
              sx = {{ color: '#fff', background: theme=> theme.palette.primary.main ,paddingX:2,paddingY: 1,boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.25), 0px 1px 2px rgba(0, 0, 0, 0.1)',borderRadius: '10px' }} >
            L∆∞u thay ƒë·ªïi</Button>
          </Box>
        </Box>
        <Box sx = {{ display: 'flex', gap: 0.5, paddingTop: 0.5, paddingBottom: 2, color: theme => theme.palette.mode == 'dark'? '#fff' : '#727171',}}>
          <LightbulbOutlinedIcon sx = {{ color: 'inherit', fontSize: '24px' }}/>

          <Typography  variant='p' component='p' fontSize= {'0.925rem'} 
            sx = {{  fontWeight: '400', color: 'inherit', width: 'fit-content', textAlign: 'start', maxWidth: '705px', textAlign: 'justify' }}>
            {' '} Cho ph√©p tinh ch·ªânh c√°c th√¥ng s·ªë c·ªët l√µi c·ªßa m√¥ h√¨nh AI, nh·∫±m t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t, ƒë·ªô ch√≠nh x√°c c≈©ng nh∆∞ kh·∫£ nƒÉng ph·∫£n h·ªìi theo y√™u c·∫ßu c·ª• th·ªÉ c·ªßa b√†i to√°n. Vi·ªác n√†y gi√∫p ki·ªÉm so√°t qu√° tr√¨nh suy lu·∫≠n, c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ƒë·∫ßu ra v√† ƒë·∫£m b·∫£o m√¥ h√¨nh ho·∫°t ƒë·ªông hi·ªáu qu·∫£ trong c√°c t√¨nh hu·ªëng kh√°c nhau.</Typography>
        </Box>
      </Box>

      <Box sx = {{ height: 'calc(100% - 155px)', background: '#ffffff', overflow: 'auto', borderRadius: '10px', padding: 1 }}>
        <Grid container spacing={2} direction="row" sx={{ height: 'calc(100vh - 280px)', justifyContent: "center", alignItems: "center" }}>
          
          <Grid size={3.5}>
            <Box sx = {{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>
              <Box sx = {{ width: '100px', height: '100px', background: 'red', borderRadius: '50%' }}></Box>
              <Typography sx = {{ fontSize: '12px !important', width: '60%', color: '#616161', paddingTop: 1 }}>·∫¢nh ƒë·∫°i di·ªán c·ªßa tr·ª£ l√Ω AI ph·∫£i l√† ·∫£nh JPG, PNG, JPEG v√† c√≥ k√≠ch th∆∞·ªõc nh·ªè h∆°n 5MB.</Typography>
              <Button startIcon={<CloudUploadOutlinedIcon/>}
              onClick={() => noticeHandler.add({
                status: 'warning',
                message: 'T√≠nh NƒÉng N√†y Ch∆∞a ƒê∆∞·ª£c H·ªó Tr·ª£'
              }) }
              >Thay ƒë·ªïi h√¨nh ·∫£nh</Button>
            </Box>
          </Grid>

          <Grid size={8.5}>
            <Box sx = {{ height: 'calc(100vh - 250px)', overflow: 'auto', display: 'flex', flexDirection: 'column', paddingTop: 1.4, paddingRight: 1, gap: 1.8 }}>
              
              <Typography variant='h6' sx = {{ textAlign: 'start' }}>Th√¥ng Tin Tr·ª£ L√Ω ·∫¢o</Typography>
              <Box sx = {{ display: 'flex', gap: 2 }}>
                <TextField sx = {TEXTFIELD_STYLE} fullWidth label="T√™n Tr·ª£ L√Ω ·∫¢o" id="assistant_name" value={"Tr·ª£ L√Ω ·∫¢o FIT_HCMUS"} disabled/>
                <Select
                  labelId="demo-simple-select-helper-label"
                  id="demo-simple-select-helper"
                  label="T√™n M√¥ H√¨nh AI"
                  value={'ChatGPT'} sx = {TEXTFIELD_STYLE} disabled
                >
                  <MenuItem value="ChatGPT">
                    <em>M√¥ h√¨nh ChatGPT</em>
                  </MenuItem>
                </Select>
              </Box>
              <TextField sx = {TEXTFIELD_STYLE} fullWidth multiline rows={3} id="description" label="Ghi √ù - Prompt" disabled
                value={`H·ªá th·ªëng ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫ßn cu·ªëi v√†o ng√†y 9/3/2025. B·∫°n c·∫ßn tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† t·∫≠p trung v√†o tr·ªçng ƒëi·ªÉm ch√≠nh. N·∫øu b·∫°n kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ c√¢u tr·∫£ l·ªùi, h√£y th·ª´a nh·∫≠n v√† kh√¥ng c·ªë g·∫Øn gi·∫£ ƒë·ªãnh c√¢u tr·∫£ l·ªùi.`}/>
              
              <Typography variant='h6' sx = {{ textAlign: 'start' }}>Tham s·ªë m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn</Typography>

              <Box sx = {{ display: 'flex', alignItems: 'center', justifyContent:'center', paddingRight: 4, gap: 2 }}>
                <IconButton onClick={() => getModal('Tham s·ªë Max_Token_Output', <Box>
                  ƒê√¢y l√† tham s·ªë ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng token t·ªëi ƒëa c√≥ th·ªÉ t·∫°o ra trong m·ªôt l·∫ßn ph·∫£n h·ªìi.{<br/>}
                  üîπS·ªë token c√†ng l·ªõn, c√¢u tr·∫£ l·ªùi c√†ng ch·ª©a nhi·ªÅu th√¥ng tin üëâ Chi ph√≠ l·ªõn{<br/>}
                  üîπS·ªë token c√†ng nh·ªè, n·ªôi dung c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn h∆°n üëâ N·ªôi dung kh√¥ng ƒë·∫ßy ƒë·ªß {<br/>}
                  Qu·∫£n l√Ω gi·ªõi h·∫°n n√†y gi√∫p t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c·ªßa m√¥ h√¨nh. 
                </Box>)}>
                  <InfoOutlinedIcon sx ={{color: '#000'}}/>
                </IconButton>
                <Typography sx= {{ width: '180px', textAlign:'start' }}>S·ªë Token Output </Typography>
                <Slider sx = {{...TEXTFIELD_STYLE}} onChange={(e) => set_max_token_output(e.target.value)} value = {max_token_output} defaultValue={1000} getAriaValueText={(value) => `${value} tokens`} step={50} marks = {marks.max_token} min={750} max={2400} valueLabelDisplay="auto"/>
                <TextField id="max_token_text" variant="outlined" sx = {{ width: '120px', ...TEXTFIELD_STYLE_2 }}
                  value={max_token_output}
                  onKeyDown={handleKeyDown}
                  onBlur={(e) => {
                    const numValue = parseInt(e.target.value, 10);
                    if(numValue < 750) { set_max_token_output(750); return}
                    if(numValue > 2400) { set_max_token_output(2400); return}

                  }}
                  onChange={(e) => {
                    const inputValue = e.target.value;
                    if (inputValue === '') { set_max_token_output(''); return }
                    set_max_token_output(inputValue)
                  }}
                />
              </Box>

              <Typography variant='h6' sx = {{ textAlign: 'start' }}>Tham s·ªë m√¥ h√¨nh Phobert</Typography>

              <Box sx = {{ display: 'flex', alignItems: 'center', paddingRight: 4, gap: 2 }}>
                <IconButton onClick={() => getModal('Tham s·ªë Threshold', <Box>
                  ƒê√¢y l√† tham s·ªë ng∆∞·ª°ng ch·∫•p nh·∫≠n d·ª± ƒëo√°n c·ªßa m√¥ h√¨nh Phobert. D·ª± ƒëo√°n c·ªßa m√¥ h√¨nh ph·∫£i {'>='} ƒë·ªÉ k·∫øt qu·∫£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n .{<br/>}
                  üîπK·∫øt qu·∫£ {'>='} Threshold üëâ D·ª± ƒëo√°n c·ªßa m√¥ h√¨nh c√≥ th·ªÉ tin t∆∞·ªüng{<br/>}
                  üîπK·∫øt qu·∫£ {'<'} Threshold, üëâ D·ª± ƒëo√°n c·ªßa m√¥ h√¨nh kh√¥ng th·ªÉ tin t∆∞·ªüng {<br/>}
                  Qu·∫£n l√Ω gi·ªõi h·∫°n n√†y gi√∫p t·ªëi ∆∞u h√≥a x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ c√¢u h·ªèi. 
                </Box>)}>
                  <InfoOutlinedIcon sx ={{color: '#000'}}/>
                </IconButton>
                <Typography sx= {{ width: '320px', textAlign:'start' }}>Ng∆∞·ª°ng ch·∫•p nh·∫≠n cho ph√©p d·ª± ƒëo√°n ch·ªß ƒë·ªÅ</Typography>
                <Slider  sx = {{...TEXTFIELD_STYLE}} onChange={(e) => set_threshold(e.target.value)} value={threshold} defaultValue={0.5} marks = {marks.filter_bias} step={0.01} min={0} max={1} valueLabelDisplay="auto"/>
                <TextField id="max_token_text" variant="outlined"  sx = {{  width: '120px', ...TEXTFIELD_STYLE_2 }}            
                  value={threshold}
                  onKeyDown={handleKeyDown}
                  onBlur={(e) => {
                    const numValue = Math.round(parseFloat(e.target.value) * 100) / 100;
                    if(numValue < 0) { set_threshold(0); return}
                    if(numValue > 1) { set_threshold(1); return}

                  }}
                  onChange={(e) => {
                    const inputValue = e.target.value;
                    if (inputValue === '') { set_threshold(''); return }
                    set_threshold(inputValue)
                  }}
                />
              </Box>

              <FormControlLabel
                
                control={<IOSSwitch sx={{ m: 1 }} 
                  checked={isHitoryInExtract}
                  onChange={() => setHitoryInExtract(prev => !prev)} />}
                label="Cho Ph√©p S·ª≠ D·ª•ng L·ªãch S·ª≠ Trong D·ª± ƒêo√°n H·ªôi Tho·∫°i"
              />

              <Typography variant='h6' sx = {{ textAlign: 'start' }}>Tham s·ªë qu√° tr√¨nh t√¨m ki·∫øm</Typography>

              <Box sx = {{ display: 'flex', alignItems: 'center', paddingRight: 4, gap: 2 }}>
                <IconButton onClick={() => getModal('Tham s·ªë K_Document', <Box>
                  ƒê√¢y l√† tham s·ªë ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng t√†i li·ªáu t∆∞∆°ng ƒë·ªìng ƒë∆∞·ª£c t√¨m th·∫•y trong kho d·ªØ li·ªáu c√≥ th·ªÉ t·∫°o ra trong m·ªôt l·∫ßn ph·∫£n h·ªìi.{<br/>}
                  üîπC√†ng nhi·ªÅu t√†i li·ªáu ch·ª©a nhi·ªÅu th√¥ng tin üëâ Chi ph√≠ l·ªõn v√† g√¢y ·∫£o gi√°c{<br/>}
                  üîπS·ªë t√†i li·ªáu t√¨m ra √≠t üëâ Kh√¥ng bao qu√°t n·ªôi dung c√¢u h·ªèi ng∆∞·ªùi d√πng {<br/>}
                  Qu·∫£n l√Ω gi·ªõi h·∫°n n√†y gi√∫p t·ªëi ∆∞u h√≥a n·ªôi dung c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng cu·ªëi. 
                </Box>)}>
                  <InfoOutlinedIcon sx ={{color: '#000'}}/>
                </IconButton>
                <Typography sx= {{ width: '320px', textAlign:'start' }}>S·ªë t√†i li·ªáu/l∆∞·ª£t tr√≤ chuy·ªán</Typography>
                <Slider  sx = {{...TEXTFIELD_STYLE}} onChange={(e) => set_k_document(e.target.value)} value={k_document} defaultValue={3} step={1}  marks = {marks.max_k} min={1} max={10} valueLabelDisplay="auto"/>
                <TextField id="max_token_text" variant="outlined" sx = {{  width: '120px', ...TEXTFIELD_STYLE_2 }} 
                  onKeyDown={handleKeyDown}
                  value={k_document} 
                  onBlur={(e) => {
                    const numValue = parseInt(e.target.value, 10);
                    if(numValue < 1) { set_k_document(1); return}
                    if(numValue > 10) { set_k_document(10); return}
                  }}
                  onChange={(e) => {
                    const inputValue = e.target.value;
                    if (inputValue === '') { set_k_document(''); return }
                    set_k_document(inputValue)
                  }}
                />
              </Box>

              <Box sx = {{ display: 'flex', alignItems: 'center', paddingRight: 4, gap: 2 }}>
                <IconButton onClick={() => getModal('Tham s·ªë Filter_Bias', <Box>
                  ƒê√¢y l√† tham s·ªë x√°c ƒë·ªãnh ƒë·ªô ∆∞u ti√™n v·ªõi metadata - M·ª©c ƒë·ªô strict matching.{<br/>}
                  üîπTham s·ªë l√† 0 üëâ ƒê·ªô ∆∞u ti√™n cao nh·∫•t{<br/>}
                  üîπTham s·ªë l√† 1 üëâ ƒê·ªô ∆∞u ti√™n th·∫•p nh·∫•t {<br/>}
                  Qu·∫£n l√Ω gi·ªõi h·∫°n n√†y gi√∫p t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c·ªßa m√¥ h√¨nh. 
                </Box>)}>
                  <InfoOutlinedIcon sx ={{color: '#000'}}/>
                </IconButton>
                <Typography sx= {{ width: '320px', textAlign:'start' }}>M·ª©c ƒë·ªô strict matching</Typography>
                <Slider  sx = {{...TEXTFIELD_STYLE}}  onChange={(e) => set_filter_bias(e.target.value)}  value={filter_bias} defaultValue={0.5} marks = {marks.filter_bias} step={0.01} min={0} max={1} valueLabelDisplay="auto"/>
                <TextField id="max_token_text" variant="outlined" sx = {{  width: '120px', ...TEXTFIELD_STYLE_2 }} 
                  value={filter_bias}
                  onKeyDown={handleKeyDown}
                  onBlur={(e) => {
                    const numValue = Math.round(parseFloat(e.target.value) * 100) / 100;
                    if(numValue < 0) { set_filter_bias(0); return}
                    if(numValue > 1) { set_filter_bias(1); return}

                  }}
                  onChange={(e) => {
                    const inputValue = e.target.value;
                    if (inputValue === '') { set_filter_bias(''); return }
                    set_filter_bias(inputValue)
                  }}
                />
              </Box>

              <Box sx = {{ paddingBottom: 2 }}></Box>

            </Box>
          </Grid>
        </Grid>
      </Box>


    </Block>
  ) : <UnknowPage/>
}

export default ModelsManager


const IOSSwitch = styled((props) => (
  <Switch focusVisibleClassName=".Mui-focusVisible" disableRipple {...props} />
))(({ theme }) => ({
  width: 42,
  height: 26,
  padding: 0,
  '& .MuiSwitch-switchBase': {
    padding: 0,
    margin: 2,
    transitionDuration: '300ms',
    '&.Mui-checked': {
      transform: 'translateX(16px)',
      color: '#fff',
      '& + .MuiSwitch-track': {
        backgroundColor: '#65C466',
        opacity: 1,
        border: 0,
        ...theme.applyStyles('dark', {
          backgroundColor: '#2ECA45',
        }),
      },
      '&.Mui-disabled + .MuiSwitch-track': {
        opacity: 0.5,
      },
    },
    '&.Mui-focusVisible .MuiSwitch-thumb': {
      color: '#33cf4d',
      border: '6px solid #fff',
    },
    '&.Mui-disabled .MuiSwitch-thumb': {
      color: theme.palette.grey[100],
      ...theme.applyStyles('dark', {
        color: theme.palette.grey[600],
      }),
    },
    '&.Mui-disabled + .MuiSwitch-track': {
      opacity: 0.7,
      ...theme.applyStyles('dark', {
        opacity: 0.3,
      }),
    },
  },
  '& .MuiSwitch-thumb': {
    boxSizing: 'border-box',
    width: 22,
    height: 22,
  },
  '& .MuiSwitch-track': {
    borderRadius: 26 / 2,
    backgroundColor: '#E9E9EA',
    opacity: 1,
    transition: theme.transitions.create(['background-color'], {
      duration: 500,
    }),
    ...theme.applyStyles('dark', {
      backgroundColor: '#39393D',
    }),
  },
}));
